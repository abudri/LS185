#! /usr/bin/env ruby

require 'pg'

class ExpenseData
  
  def initialize
    # By using a constant here, we can access the connection from within both list_expenses and add_expense. This is a sign that we are missing an object in our design.
    @connection = PG.connect(dbname: "expense_app_ls185") # create a connecton to db you created, my db name is `expense_app_ls185` and has the `expenses` tables
  end

  # method for listing all the expenses
  def list_expenses  
    result = @connection.exec("SELECT * from expenses ORDER BY created_on")  # execute query on the db
    display_expenses(result)
  end

  def add_expense(amount, memo)
    date = Date.today
    sql = "INSERT INTO expenses (amount, memo, created_on) VALUES ($1, $2, $3)"
    @connection.exec_params(sql, [amount, memo, date]) # prior was .exec, but .exec_params sanitizes the inputs, see: https://launchschool.com/lessons/10f7102d/assignments/6877d345
  end

  def search_expense(query)
    sql = "SELECT * FROM expenses WHERE memo ILIKE $1"
    result = @connection.exec_params(sql, ["%#{query}%"])
    display_expenses(result)
  end

  def display_expenses(expenses)
    expenses.each do |tuple|
      columns = [ tuple['id'].rjust(3),  # all the columns per an individual row in table
                 tuple['created_on'].rjust(10),
                 tuple["amount"].rjust(12),
                 tuple["memo"] ]
      puts columns.join(' | ')
    end
  end
end

class CLI
  def initialize
    @application = ExpenseData.new
  end

  def run(arguments)
    command = arguments.shift
    case command
    when "add"
      amount = arguments[0]
      memo = arguments[1]
      abort "You must provide an amount and memo." unless amount && memo
      @application.add_expense(amount, memo)
    when "list"
      @application.list_expenses
    when "search"
      @application.search_expense(arguments[0])
    else
      display_help
    end
  end

  def display_help
    puts <<~HELP
      An expense recording system

      Commands:

      add AMOUNT MEMO [DATE] - record a new expense
      clear - delete all expenses
      list - list all expenses
      delete NUMBER - remove expense with id NUMBER
      search QUERY - list expenses with a matching memo field
    HELP
  end
end

CLI.new.run(ARGV)