#! /usr/bin/env ruby

require 'pg'
require 'io/console' # for using IO#getch: https://ruby-doc.org/stdlib-2.7.1/libdoc/io/console/rdoc/IO.html#method-i-getch

class ExpenseData
  def initialize
    # By using a constant here, we can access the connection from within both list_expenses and add_expense. This is a sign that we are missing an object in our design.
    @connection = PG.connect(dbname: "expense_app_ls185") # create a connecton to db you created, my db name is `expense_app_ls185` and has the `expenses` tables
    setup_schema # creates the `expenses` table in the db if it does not already exist
  end

  # method for listing all the expenses
  def list_expenses  
    result = @connection.exec("SELECT * from expenses ORDER BY created_on")  # execute query on the db
    display_count(result)  # tells if there are any rows in expenses table, if not, then it tells us and below line isn't executed (ntuples is not > 0)
    display_expenses(result) if result.ntuples > 0
  end

  def add_expense(amount, memo)
    date = Date.today
    sql = "INSERT INTO expenses (amount, memo, created_on) VALUES ($1, $2, $3)"
    @connection.exec_params(sql, [amount, memo, date]) # prior was .exec, but .exec_params sanitizes the inputs, see: https://launchschool.com/lessons/10f7102d/assignments/6877d345
  end

  def search_expense(query)
    sql = "SELECT * FROM expenses WHERE memo ILIKE $1"
    result = @connection.exec_params(sql, ["%#{query}%"])
    display_expenses(result)
  end

  def delete_expense(id)
    sql = "SELECT * FROM expenses WHERE id=$1" # select from `expenses` table where id is first argument in CLI program command
    result = @connection.exec_params(sql, [id])

    if result.ntuples == 1
      sql = "DELETE FROM expenses WHERE id=$1"
      @connection.exec_params(sql, [id])

      puts "The following expense has been deleted:"
      display_expenses(result)
    else
      puts "There is no expense with the id '#{id}'."
    end
  end

  def delete_all_expenses
    @connection.exec("DELETE FROM expenses")
    puts "All expenses have been deleted."
  end

  private 

  def display_count(expenses)
    count = expenses.ntuples
    if count == 0
      puts "There are no expenses."
    else
      puts "There are #{count} expense#{"s" if count > 1}"
    end
  end

  def display_expenses(expenses)
    expenses.each do |tuple|
      columns = [ tuple['id'].rjust(3),  # all the columns per an individual row in table
                 tuple['created_on'].rjust(10),
                 tuple["amount"].rjust(12),
                 tuple["memo"] ]
      puts columns.join(' | ')
    end

    puts "-" * 50 # for -------
    
    amount_sum = expenses.field_values("amount").map(&:to_f).inject(:+)
    puts "Total #{amount_sum.to_s.rjust(25)}"
  end

  # create the table `expenses` if it doesn't already exist in the database given in dbname in #initialize
  def setup_schema
    result = @connection.exec("SELECT COUNT(*) FROM information_schema.tables 
                      WHERE table_schema = 'public' AND table_name = 'expenses';")
    if result[0]["count"] == 0
      @connection.exec("CREATE TABLE expenses (
                        id serial PRIMARY KEY,
                        amount numeric(6,2) NOT NULL CHECK (amount >= 0.01),
                        memo text NOT NULL,
                        created_on date NOT NULL);")
    end
  end
end

class CLI
  def initialize
    @application = ExpenseData.new
  end

  def run(arguments)
    command = arguments.shift
    case command
    when "add"
      amount = arguments[0]
      memo = arguments[1]
      abort "You must provide an amount and memo." unless amount && memo
      @application.add_expense(amount, memo)
    when "list"
      @application.list_expenses
    when "search"
      @application.search_expense(arguments[0])
    when "delete"
      @application.delete_expense(arguments[0])
    when "clear"
      "This will remove all expenses. Are you sure? (y/n)"
      response = $stdin.getch
      @application.delete_all_expenses if response == "y"
    else
      display_help
    end
  end

  def display_help
    puts <<~HELP
      An expense recording system

      Commands:

      add AMOUNT MEMO [DATE] - record a new expense
      clear - delete all expenses
      list - list all expenses
      delete NUMBER - remove expense with id NUMBER
      search QUERY - list expenses with a matching memo field
    HELP
  end
end

CLI.new.run(ARGV)